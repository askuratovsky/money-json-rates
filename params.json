{"name":"money-json-rates","tagline":"Ruby Money::Bank interface for jsonrates.com exchange data","body":"# Money::Bank::JsonRates\r\n\r\n[![Build Status](https://travis-ci.org/askuratovsky/money-json-rates.svg?branch=master)](https://travis-ci.org/askuratovsky/money-json-rates)\r\n\r\nThis gem extends Money::Bank::VariableExchange of gem [money](https://github.com/RubyMoney/money) and gives you access to the current exchange rates\r\n\r\n## Features\r\n\r\nThis gem uses [jsonrates.com api](http://jsonrates.com/), so\r\n\r\n- it's free\r\n- supports 168 currencies\r\n- precision of rates up to 8 digits after point\r\n- uses fast and reliable json api\r\n- average response time < 20ms\r\n- no limitations for requesting the API\r\n- supports caching currency rates\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n```ruby\r\ngem 'money-json-rates'\r\n```\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install money-json-rates\r\n\r\n## Usage\r\n\r\nFirst, you should to register account on [jsonrates.com](http://jsonrates.com/) and get your personal api_key.\r\n\r\n```ruby\r\nrequire 'money'\r\nrequire 'money/bank/json_rates'\r\n\r\n# (optional)\r\n# set the seconds after than the current rates are automatically expired\r\n# by default, they never expire\r\nMoney::Bank::JsonRates.ttl_in_seconds = 7200 # 2 hours ttl\r\n\r\n# create new bank instance\r\nbank = Money::Bank::JsonRates.new\r\n\r\n# create new bank instance with block specifying rounding of exchange result\r\nbank = Money::Bank::JsonRates.new {|n| n.round(4)} # round result to 4 digits after point\r\n\r\n# specify your api_key from jsonrates.com\r\nbank.api_key = 'xx-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\r\n\r\n# set default bank to instance\r\nMoney.default_bank = bank\r\n```\r\n\r\nAlso you can setup JsonRates as default_bank for [money-rails](https://github.com/RubyMoney/money-rails) gem in config/initializers/money.rb\r\n\r\n```ruby\r\nrequire 'money/bank/json_rates'\r\nMoneyRails.configure do |config|\r\n\r\n  bank = Money::Bank::JsonRates.new\r\n  bank.api_key = 'xx-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\r\n  config.default_bank = bank\r\n\r\nend\r\n```\r\n\r\nAn `NoApiKey` will be thrown if api_key was not specified.\r\n\r\nAn `JsonRatesRequestError` will be thrown if jsonrates.com api returns error on api request.\r\n\r\n\r\n## Refs\r\n\r\nCreated using `VariableExchange` implementation and using `google_currency` basics.\r\n\r\n- https://github.com/RubyMoney/money\r\n- https://github.com/RubyMoney/google_currency\r\n\r\nMore implementations:\r\n\r\n- https://github.com/RubyMoney/eu_central_bank\r\n- https://github.com/matiaskorhonen/nordea\r\n- https://github.com/slbug/nbrb_currency\r\n- https://github.com/spk/money-open-exchange-rates\r\n- https://github.com/atwam/money-historical-bank\r\n- https://github.com/rmustafin/russian_central_bank\r\n\r\n## Contributing\r\n\r\n1. Fork it ( https://github.com/askuratovsky/money-json-rates/fork )\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create a new Pull Request","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}